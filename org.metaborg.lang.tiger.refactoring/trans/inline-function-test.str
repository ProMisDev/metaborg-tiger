module inline-function-test

imports 
	signatures/-
	nabl2/api
	pp
	libspoofax/stratego/debug
	renaming
	inline-function
	
rules // rules called by spt
  inline-call-test : ast -> result
    where
     result := <exec-inline-call-test(|"plus")> ast
      
  inline-call-test-no-args : ast -> result
    where
    	result := <exec-inline-call-test(|"zero")> ast
      
  inline-call-test-side-effects : ast -> result
    where
    	result := <exec-inline-call-test(|"square")> ast
      
  inline-call-proc-test : ast -> result
    where
    	result := <exec-inline-call-test(|"printnl")> ast
      
  inline-call-proc-test-no-args : ast -> result
    where
      result := <exec-inline-call-test(|"helloWorld")> ast
      
	inline-function-test : ast -> result
    where
    	analysis := <nabl2-get-ast-analysis> ast;
      <not(nabl2-analysis-has-errors)> analysis
    with
      target-call := <collect-one(get-call-test(|"printnl"))> ast
      ; <ppdebug0> target-call
      ; (params, body, target-dec-occ) := <exec-get-function(|analysis, target-call)> ast
      //recursive function detection
      ; <not(collect-one(replace-call(|analysis, target-dec-occ, body, params)))> body 
      ; inlined-ast := <topdown(try(replace-call(|analysis, target-dec-occ, body, params)))> ast  
      ; result := <topdown(try(delete-function(|target-dec-occ)))> inlined-ast 
      ; <ppdebugna0> result
      
rules
	exec-inline-call-test(|functionName) : ast -> result
    where
    	analysis := <nabl2-get-ast-analysis> ast;
      <not(nabl2-analysis-has-errors)> analysis
    with
      target-call := <collect-one(get-call-test(|functionName))> ast
      ; (params, body, target-dec-occ) := <exec-get-function(|analysis, target-call)> ast
      ; result := <inline-this-function-call(|target-call, body, params)> ast

rules
  get-call-test(|target-name): Call(name, args) -> name
	where
		<eq> (<strip-annos> target-name, <strip-annos> name)
    

 		
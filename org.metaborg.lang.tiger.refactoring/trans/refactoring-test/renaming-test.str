module renaming-test

imports 
	signatures/-
	nabl2/api
	pp
	libspoofax/stratego/debug
	refactoring/refactoring-util
	refactoring/renaming
	

rules // rules called by spt
  rename-test-var : ast -> result
    where
      old-name := "msg"
      ; new-name := "message"
      ; path := "test/renaming/variables.spt"
    	; result := <rename-action-test(fail | old-name, new-name, path)> ast
    	
  rename-test-var-capture : ast -> result
    where
      old-name := "y"
      ; new-name := "x"
      ; path := "test/renaming/variables.spt"
    	; result := <rename-action-test(id | old-name, new-name, path)> ast
    	
  rename-test-type : ast -> result
    where
      old-name := "student"
      ; new-name := "person"
      ; path := "test/renaming/types.spt"
    	; result := <rename-action-test(fail | old-name, new-name, path)> ast
    	
  rename-test-field : ast -> result
    where
      old-name := "name"
      ; new-name := "fullName"
      ; path := "test/renaming/types.spt"
    	; result := <rename-action-test(fail | old-name, new-name, path)> ast
 
  rename-test-function : ast -> result
    where
      old-name := "plus"
      ; new-name := "add"
      ; path := "test/renaming/functions.spt"
    	; result := <rename-action-test(fail | old-name, new-name, path)> ast
    	
  rename-test-procedure : ast -> result
    where
      old-name := "printnl"
      ; new-name := "printNewLine"
      ; path := "test/renaming/functions.spt"
    	; result := <rename-action-test(fail | old-name, new-name, path)> ast

  rename-test-farg : ast -> result
    where
      old-name := "x"
      ; new-name := "text"
      ; path := "test/renaming/functions.spt"
    	; result := <rename-action-test(fail | old-name, new-name, path)> ast
    	
  rename-test-farg-capture : ast -> result
    where
      old-name := "d"
      ; new-name := "a"
      ; path := "test/renaming/functions.spt"
    	; result := <rename-action-test(id | old-name, new-name, path)> ast

rules     	  
    rename-action-test(capture-expected |old-name,  new-name, path): ast -> result
    where
    	analysis := <nabl2-get-ast-analysis> ast;
      <not(nabl2-analysis-has-errors)> analysis
    with
		(occs, decs, refs) := <collect-occs(|analysis)> ast
    ; target-dec-occ := <get-target-dec-occ-test(|analysis, occs, decs, old-name)> ast 
    ; target-indices := <get-target-indices(|analysis, refs)> target-dec-occ
		; old-name-bindings := <get-all-name-bindings(|analysis)> ast
		; renamed-ast := <bottomup(try(rename(|target-indices, new-name)))> ast
		; if capture-expected
		then not(check-capture(|renamed-ast, old-name-bindings, path))
		else check-capture(|renamed-ast, old-name-bindings, path) end
    ; result := renamed-ast
    	  
  get-target-dec-occ-test(|analysis, occs, decs, old-name): ast -> target-dec-occ
	where
		selected-occ := <collect-one(get-occurrence-test(|occs, old-name))> ast
    ; target-dec-occ := <resolve-selected-occ(|analysis, decs)> selected-occ
    
  get-occurrence-test(|occs, old-name): t -> occurrence
	where
		<is-string> t
		; <eq-no-annos> (old-name, t)
		; term-index := <nabl2-get-ast-index> t
		; occurrence := <fetch-elem(occ-eq-term-index(|term-index))> occs
    
module refactoring-util

imports 
	signatures/-
	nabl2/api
	pp
	libspoofax/stratego/debug

rules 
  get-dec-from-dec(|namespace): name -> dec-occ
  where	 		
		dec-occ := <nabl2-mk-occurrence(|namespace)> name 
		
	get-dec-from-ref(|analysis, namespace): name -> dec-occ
	where
		ref-occ := <nabl2-mk-occurrence(|namespace)> name
		; (dec-occ, _) := <nabl2-get-resolved-name(|analysis)> ref-occ
    
	check-ref-occ(|analysis, namespace, name, target-dec-occ) =
		occ-name := <nabl2-get-occurrence-name> target-dec-occ
		; <eq-no-annos> (occ-name, name) 
    ; ref-occ := <nabl2-mk-occurrence(|namespace)> name 
		; (dec-occ, _) := <nabl2-get-resolved-name(|analysis)> ref-occ
    ; <?dec-occ> target-dec-occ
    
  check-dec-occ(|namespace, name, target-dec-occ) =
		occ-name := <nabl2-get-occurrence-name> target-dec-occ		
		; <ppdebug(|"occ-name: ")> occ-name
		; <ppdebug(|"name: ")> name
		; <eq-no-annos> (occ-name, name) 
    ; dec-occ := <nabl2-mk-occurrence(|namespace)> name
  	; <?dec-occ> target-dec-occ
  	
rules //check-capture-rename

	get-all-name-bindings(|analysis): ast -> name-bindings
	where
		name-bindings := <collect-all(get-name-binding(|analysis))> ast
    
rules //get-name-binding    

  get-name-binding(|analysis): Var(name) ->  name-binding
  where
  	name-binding := <get-dec-ref-pair(|analysis, "Var")> name
		
  get-name-binding(|analysis): Tid(name) -> name-binding
  where
  	name-binding := <get-dec-ref-pair(|analysis, "Type")> name
    
	get-name-binding(|analysis): Call(name, args) -> name-binding 
	where
		name-binding := <get-dec-ref-pair(|analysis, "Var")> name
		
	get-name-binding(|analysis): InitField(name, exp) -> name-binding
	where
		name-binding := <get-dec-ref-pair(|analysis, "Var")> name
  
  get-name-binding(|analysis): FieldVar(type-var, name) -> name-binding
  where
   name-binding := <get-dec-ref-pair(|analysis, "Var")> name
  
rules 
	get-dec-ref-pair(|analysis, namespace): name -> (ref-index, dec-index)
	where
		ref-occ := <nabl2-mk-occurrence(|namespace)> name
		; (dec-occ, _) := <nabl2-get-resolved-name(|analysis)> ref-occ
		; ref-index := <nabl2-get-occurrence-index> ref-occ
		; dec-index := <nabl2-get-occurrence-index> dec-occ
		
	eq-no-annos: (term1, term2) -> (term1, term2) 
		where
		  <eq> (<strip-annos> term1, <strip-annos> term2) 
		  
rules //get-term-from-id  
	
	//Variable	
  get-term-from-id(|selected-id): term@VarDecNoType(name, exp) -> term
	where
		<?selected-id> name
		
  get-term-from-id(|selected-id): term@VarDec(name, type, exp) -> term
	where
		<?selected-id> name
  	
  get-term-from-id(|selected-id): term@Var(name) -> term
	where
		<?selected-id> term
			
	// Type
	get-term-from-id(|selected-id): term@TypeDec(name, type) -> term
	where
	  <?selected-id> name
		
	get-term-from-id(|selected-id): term@Tid(name) -> term
	where
	  <?selected-id> term
		
	// Function
	get-term-from-id(|selected-id): term@ProcDec(name, args, body) -> term
	where
	  <?selected-id> name
  		
	get-term-from-id(|selected-id): term@FunDec(name, args, type, body) -> term
	where
	  <?selected-id> name
		
	get-term-from-id(|selected-id): term@Call(name, args) -> term
	where
		<?selected-id> name
				
	//Function Argument
	get-term-from-id(|selected-id): term@FArg(name, type) -> term
	where
	  <?selected-id> name
	
	//Field
	get-term-from-id(|selected-id): term@Field(name, type) -> term
	where
		<?selected-id> name		
		
	get-term-from-id(|selected-id): term@InitField(name, exp) -> term
	where
	  <?selected-id> name
		
	get-term-from-id(|selected-id): term@FieldVar(type-var, name) -> term
	where
		<?selected-id> name
		  
rules //list utitily functions
	make-list: term -> list
	where
		if <?Cons(_,_)> term 
		then list := term
		else list := Cons(term, Nil()) end
		
	head: [head| tail] -> head
	
	is-empty: list -> list
	where
		length := <length> list
		; <eq> (length, 0)
		  
rules // external rules
	external read-config-file(|)
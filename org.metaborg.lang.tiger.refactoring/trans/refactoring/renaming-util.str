module renaming-util

imports 
	signatures/-
	nabl2/api
	nabl2/runtime/analysis/-
	pp
	libspoofax/stratego/debug
	libstratego-lib
	
rules     
	check-ref-occ(|analysis, namespace, name, target-dec-occ) =
		occ-name := <nabl2-get-occurrence-name> target-dec-occ
		; <eq-no-annos> (occ-name, name) 
    ; ref-occ := <nabl2-mk-occurrence(|namespace)> name 
		; (dec-occ, _) := <nabl2-get-resolved-name(|analysis)> ref-occ
    ; <?dec-occ> target-dec-occ
    
  check-dec-occ(|namespace, name, target-dec-occ) =
		occ-name := <nabl2-get-occurrence-name> target-dec-occ		
		; <eq-no-annos> (occ-name, name) 
    ; dec-occ := <nabl2-mk-occurrence(|namespace)> name
    ; <ppdebug(|"dec-occ: ")> dec-occ
  	; <?dec-occ> target-dec-occ
  	
  get-target-dec-occ(|analysis, occs, decs): selected-term -> target-dec-occ
	where
		selected-occ := <collect-one(get-occurrence(|occs))> selected-term
    ; target-dec-occ := <resolve-selected-occ(|analysis, decs)> selected-occ
    
  resolve-selected-occ(|analysis, decs): selected-occ -> target-dec-occ
  where
  	if <elem> (selected-occ, decs) then
  		target-dec-occ := selected-occ
  	else
  		(target-dec-occ, _) := <nabl2-get-resolved-name(|analysis)> selected-occ
  	end
    
rules //name binding

	get-all-name-bindings(|analysis): ast -> name-bindings
	where
		refs  := <nabl2-get-all-refs(|analysis)> ast
		; name-bindings := <map(get-dec-ref-pair(|analysis))> refs
		
	get-dec-ref-pair(|analysis): ref -> (ref, dec)
	where
		(dec, _) := <nabl2-get-resolved-name(|analysis)> ref
		
	get-name-binding-indexes: name-bindings -> sorted-indexes
	where
		name-binding-indexes := <map(get-name-binding-index)> name-bindings
		; sorted-indexes := <qsort(dec-ref-pair-gt)> name-binding-indexes
	
	get-name-binding-index: (Occurrence(ref-ns, ref-name, ref-index), Occurrence(dec-ns, dec-name, dec-index)) 
														-> (ref-index, dec-index)	
														
	dec-ref-pair-gt: ((ref-1, dec-1), (ref-2, dec-2)) -> <id>
	where
		<term-index-gt> (ref-1, ref-2)
														
	term-index-gt: (TermIndex(path-1, num-index-1), TermIndex(path-2, num-index-2)) -> <id>
	where 
		<gt> (num-index-1, num-index-2)
		
rules //get-declaration 

  get-dec-from-dec(|namespace): name -> dec-occ
  where	 		
		dec-occ := <nabl2-mk-occurrence(|namespace)> name 
		
	get-dec-from-ref(|analysis, namespace): name -> dec-occ
	where
		ref-occ := <nabl2-mk-occurrence(|namespace)> name
		; (dec-occ, _) := <nabl2-get-resolved-name(|analysis)> ref-occ
	
	//Variable	
  get-declaration(|analysis): VarDecNoType(name, exp) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Var")> name
		
  get-declaration(|analysis): VarDec(name, type, exp) -> dec-occ
	where
		dec-occ := <get-dec-from-dec(|"Var")> name
  	
  get-declaration(|analysis): Var(name) -> dec-occ
	where
		dec-occ := <get-dec-from-ref(|analysis, "Var")> name
	
	// Type
	get-declaration(|analysis): TypeDec(name, type) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Type")> name
		
	get-declaration(|analysis): Tid(name) -> dec-occ
	where
	  dec-occ := <get-dec-from-ref(|analysis, "Type")> name
		
	// Function
	get-declaration(|analysis): ProcDec(name, args, body) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Var")> name
  		
	get-declaration(|analysis): FunDec(name, args, type, body) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Var")> name
		
	get-declaration(|analysis): Call(name, args) -> dec-occ
	where
	  dec-occ := <get-dec-from-ref(|analysis, "Var")> name
		
	//Function Argument
	get-declaration(|analysis): FArg(name, type) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Var")> name
	
	//Field
	get-declaration(|analysis): Field(name, type) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Field")> name
		
	get-declaration(|analysis): InitField(name, exp) -> dec-occ
	where
	  dec-occ := <get-dec-from-ref(|analysis, "Field")> name
		
	get-declaration(|analysis): FieldVar(type-var, name) -> dec-occ
	where
		dec-occ := <get-dec-from-ref(|analysis, "Field")> name
				  
rules //get-term-from-id  
	
	//Variable	
  get-term-from-id(|selected-id): term@VarDecNoType(name, exp) -> term
	where
		<?selected-id> name
		
  get-term-from-id(|selected-id): term@VarDec(name, type, exp) -> term
	where
		<?selected-id> name
  	
  get-term-from-id(|selected-id): term@Var(name) -> term
	where
		<?selected-id> term
			
	// Type
	get-term-from-id(|selected-id): term@TypeDec(name, type) -> term
	where
	  <?selected-id> name
		
	get-term-from-id(|selected-id): term@Tid(name) -> term
	where
	  <?selected-id> term
		
	// Function
	get-term-from-id(|selected-id): term@ProcDec(name, args, body) -> term
	where
	  <?selected-id> name
  		
	get-term-from-id(|selected-id): term@FunDec(name, args, type, body) -> term
	where
	  <?selected-id> name
		
	get-term-from-id(|selected-id): term@Call(name, args) -> term
	where
		<?selected-id> name
				
	//Function Argument
	get-term-from-id(|selected-id): term@FArg(name, type) -> term
	where
	  <?selected-id> name
	
	//Field
	get-term-from-id(|selected-id): term@Field(name, type) -> term
	where
		<?selected-id> name		
		
	get-term-from-id(|selected-id): term@InitField(name, exp) -> term
	where
	  <?selected-id> name
		
	get-term-from-id(|selected-id): term@FieldVar(type-var, name) -> term
	where
		<?selected-id> name
		
	
rules // occurrence utility functions

	collect-occs(|analysis): ast -> (occs, decs, refs)
	where
		decs := <nabl2-get-all-decls(|analysis)> ast
    ; refs  := <nabl2-get-all-refs(|analysis)> ast
    ; occs := <conc> (decs, refs)
    
	get-occurrence(|occs): t -> occurrence
	where
		<is-string> t
		; term-index := <nabl2-get-ast-index> t
		; occurrence := <fetch-elem(occ-eq-term-index(|term-index))> occs
			
	occ-eq-term-index(|target-term-index): occ@Occurrence(_, _, term-index) -> occ
	where
		<?target-term-index> term-index
		
	get-term-index-from-occ: Occurrence(_, _, term-index) -> term-index
		  
rules //list utitily functions
	make-list: term -> list
	where
		if <?Cons(_,_)> term 
		then list := term
		else list := Cons(term, Nil()) end
		
	head: [head| tail] -> head
	
	is-empty: list -> list
	where
		length := <length> list
		; <eq> (length, 0)
		
	add-elem: (new-elem, list) -> [new-elem | list]
		
		
rules //Other utility functions
	eq-no-annos: (term1, term2) -> (term1, term2) 
		where
		  <eq> (<strip-annos> term1, <strip-annos> term2) 
		  
	log-error-on-fail(s|error-msg) = s <+ ppdebug(|error-msg); fail
		  
rules // external rules
	external read-config-file(|)
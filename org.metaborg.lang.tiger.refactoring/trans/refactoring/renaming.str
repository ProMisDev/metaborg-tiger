module renaming

imports 
	signatures/-
	nabl2/api
	pp
	libspoofax/stratego/debug
	refactoring/refactoring-util

rules // menu action strategies
  rename-action :
    (selected-id, _, ast, path, project-path) -> (filename, result)
    where
    	analysis := <nabl2-get-ast-analysis> ast;
      <not(nabl2-analysis-has-errors)> analysis
    with
      filename := <guarantee-extension(|"refactored.tig")> path
    ; target-dec-occ := <collect-one(get-declaration(|analysis, selected-id)) > ast
		; new-name := <read-config-file> ($[[project-path]/[path].rfac], "refactoring.rename")    
    ; (old-name-bindings, renamed-ast) := <exec-rename(|analysis, target-dec-occ, new-name)> ast
    ; check-capture(|renamed-ast, target-dec-occ, new-name, old-name-bindings, path)
    ; result := <pp-Tiger-string> renamed-ast
    
rules  //renaming steps
	exec-rename(|analysis, target-dec-occ, new-name): ast -> (old-name-bindings, renamed-ast)
	 where
	    old-name-bindings := <get-all-name-bindings(|analysis, target-dec-occ)> ast
    	; renamed-ast := <topdown(try(rename(|analysis, target-dec-occ, new-name)))> ast
    	
  check-capture(|renamed-ast, target-dec-occ, new-name, old-name-bindings, path) =
  		(new-renamed-ast, new-analysis, _, _, _) := <nabl2-analyze-ast(|path)> renamed-ast
  		; new-name-bindings := <get-all-name-bindings(|new-analysis, new-name)> new-renamed-ast
  		; <ppdebug(|"old name bindings: ")> old-name-bindings
  		; <ppdebug(|"new name bindings: ")> new-name-bindings
  		; <eq> (old-name-bindings, new-name-bindings)
  		; <ppdebug0> "Bindings are equal"
    
rules //rename    

	//Variable
  rename(|analysis, target-dec-occ, target-name): VarDecNoType(name, exp) -> VarDecNoType(target-name, exp)
	where
	 check-dec-occ(|"Var", name, target-dec-occ)
  		
  rename(|analysis, target-dec-occ, target-name): VarDec(name, type, exp) -> VarDec(target-name, type, exp)
	where
		check-dec-occ(|"Var", name, target-dec-occ)
  		
  rename(|analysis, target-dec-occ, target-name): Var(name) -> Var(target-name)
	where
   check-ref-occ(|analysis, "Var", name, target-dec-occ)

  //Type
  rename(|analysis, target-dec-occ, target-name): TypeDec(name, type) -> TypeDec(target-name, type)
	where
		check-dec-occ(|"Type", name, target-dec-occ)
		
  rename(|analysis, target-dec-occ, target-name): Tid(name) -> Tid(target-name)
	where
    check-ref-occ(|analysis, "Type", name, target-dec-occ)
    
  //Function
  rename(|analysis, target-dec-occ, target-name): ProcDec(name, args, body) -> ProcDec(target-name, args, body)
	where
		check-dec-occ(|"Var", name, target-dec-occ)
  		
  rename(|analysis, target-dec-occ, target-name): FunDec(name, args, type, body) -> FunDec(target-name, args, type, body)
	where
		check-dec-occ(|"Var", name, target-dec-occ)
		
	rename(|analysis, target-dec-occ, target-name): Call(name, args) -> Call(target-name, args)
	where
    check-ref-occ(|analysis, "Var", name, target-dec-occ)
    
  //Function Argument
  rename(|analysis, target-dec-occ, target-name): FArg(name, type) -> FArg(target-name, type)
	where
		check-dec-occ(|"Var", name, target-dec-occ) 
		
  //Field
  rename(|analysis, target-dec-occ, target-name): Field(name, type) -> Field(target-name, type)
	where
		check-dec-occ(|"Field", name, target-dec-occ)
		
	rename(|analysis, target-dec-occ, target-name): InitField(name, exp) -> InitField(target-name, exp)
	where
    check-ref-occ(|analysis, "Field", name, target-dec-occ)
  
  rename(|analysis, target-dec-occ, target-name): FieldVar(type-var, name) -> FieldVar(type-var, target-name)
	where
    check-ref-occ(|analysis, "Field", name, target-dec-occ)

rules //get-declaration  
	
	//Variable	
  get-declaration(|analysis, selected-id): VarDecNoType(name, exp) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Var", name)> selected-id
		
  get-declaration(|analysis, selected-id): VarDec(name, type, exp) -> dec-occ
	where
		dec-occ := <get-dec-from-dec(|"Var", name)> selected-id
  	
  get-declaration(|analysis, selected-id): node@Var(name) -> dec-occ
	where
		dec-occ := <get-dec-from-ref(|analysis, "Var", name, node)> selected-id
	
	// Type
	get-declaration(|analysis, selected-id): TypeDec(name, type) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Type", name)> selected-id
		
	get-declaration(|analysis, selected-id): node@Tid(name) -> dec-occ
	where
	  dec-occ := <get-dec-from-ref(|analysis, "Type", name, node)> selected-id
		
	// Function
	get-declaration(|analysis, selected-id): ProcDec(name, args, body) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Var", name)> selected-id
  		
	get-declaration(|analysis, selected-id): FunDec(name, args, type, body) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Var", name)> selected-id
		
	get-declaration(|analysis, selected-id): node@Call(name, args) -> dec-occ
	where
	  dec-occ := <get-dec-from-ref(|analysis, "Var", name, name)> selected-id
		
	//Function Argument
	get-declaration(|analysis, selected-id): FArg(name, type) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Var", name)> selected-id
	
	//Field
	get-declaration(|analysis, selected-id): Field(name, type) -> dec-occ
	where
	  dec-occ := <get-dec-from-dec(|"Field", name)> selected-id
		
	get-declaration(|analysis, selected-id): InitField(name, exp) -> dec-occ
	where
	  dec-occ := <get-dec-from-ref(|analysis, "Field", name, name)> selected-id
		
	get-declaration(|analysis, selected-id): FieldVar(type-var, name) -> dec-occ
	where
		dec-occ := <get-dec-from-ref(|analysis, "Field", name, name)> selected-id
	
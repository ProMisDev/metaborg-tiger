module renaming

imports 
	signatures/-
	nabl2/api
	pp
	libspoofax/stratego/debug
	libspoofax/term/origin
	libspoofax/ui/dialogs
	
	signatures/nabl2/shared/common/-
  	signatures/nabl2/runtime/common/-

rules // menu action strategies
  rename-action-2 :
    (selected-term, _, ast, path, project-path) -> (filename, result)
    where
    	analysis := <nabl2-get-ast-analysis> ast;
      <not(nabl2-analysis-has-errors)> analysis
    with
    	new-name := <read-new-name> path
	    ; {| ErrorMessage: renamed-ast := <rename(|selected-term, new-name, path) <+ show-errors; !ast> ast |}
	    ; filename := <compose-filename> path
	    // ; (_, _, result) := <construct-textual-change> (ast, renamed-ast)
	    ; result := <pp-Tiger-string> renamed-ast
    
  rename-action-debug :
    (selected-term, _, ast, path, project-path) -> (filename, result)
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
	    check-selection(|selected-term, ast)
	    ; resolution-relation := <calc-resolution-relation> analysis
	    ; selected-occ := <find-name-index(|ast, resolution-relation)> selected-term
	    ; <ppdebug(|"selected-occ: ")> selected-occ
	    ; <ppdebug(|"resolution-relation: ")> resolution-relation
	    ; target-indices := <calc-name-cluster> (selected-occ, resolution-relation)
	    ; <ppdebug(|"target-indices: ")> target-indices
		; new-name := "bar"
		; renamed-ast := <rename-ast(|target-indices, new-name)> ast
	    ; check-capture(|renamed-ast, resolution-relation, path)
	    ; filename := <guarantee-extension(|"refactored.tig")> path
	    ; result := <pp-Tiger-string> renamed-ast
    
    rename(|selected-term, new-name, path): ast -> renamed-ast
    where
        analysis := <nabl2-get-ast-analysis> ast
        ; res-rel := <calc-resolution-relation> analysis
	    ; selected-index := <find-name-index(|ast, res-rel)> selected-term
	    ; target-indices := <calc-name-cluster> (selected-index, res-rel)
		; renamed-ast := <rename-ast(|target-indices, new-name)> ast
	    ; check-capture(|renamed-ast, res-rel, path)  

rules // Step 1: Find all terms to rename
  calc-resolution-relation: analysis -> user-defined-relation
    where
      refs  := <nabl2-get-all-refs(|analysis)>
      ; decs := <nabl2-get-all-decls(|analysis)>
      ; ref-dec-pairs := <map(make-resolution-pair(|analysis))> refs
      ; decs-reflexive-pairs := <map(make-reflexive-pair)> decs
      ; relation := <conc;make-set> (decs-reflexive-pairs, ref-dec-pairs)
      ; user-defined-relation := <filter(is-user-defined)> relation
      
  make-resolution-pair(|analysis) : ref -> (ref-index, dec-index)
    where
      (dec, _) := <nabl2-get-resolved-name(|analysis)> ref
      ; ref-index := <get-term-index-from-occ> ref
      ; dec-index := <get-term-index-from-occ> dec         

  make-reflexive-pair: dec -> (term-index, term-index)
    where
      term-index := <get-term-index-from-occ> dec

  is-user-defined: (ref, dec@TermIndex(path, num-index)) -> <id>
    where
      <not(eq)> (num-index, 0)

  get-term-index-from-occ: Occurrence(_, name, term-index) -> term-index
      
rules // Step 2: Find occurrence index in selection
  find-name-index(|ast, res-rel): term -> occ-index
  where
    <check-selection(|term, ast)> ast
  	; occ-index := <collect-one(get-name-index(|res-rel))> term  
  	  <+ add-error(|"Renaming impossible", "The selected term cannot be renamed."); fail
  	
  	check-selection(|selected-term, ast) =
      <add-error-on-fail(not(eq)|"Invalid selection", "Please select a name")> (selected-term, ast)
    
	get-name-index(|res-rel): term -> occurrence
	where
		if (<is-list> term) then
			<map(get-name-index(|res-rel))> term
		else
			<is-string> term
			; term-index := <nabl2-get-ast-index> term
			; occurrence := <fetch-elem(resolution-pair-contains(|term-index))> res-rel
		end	
			
	resolution-pair-contains(|term-index): (ref-index, dec-index) -> term-index 
	where
		<eq> (term-index, ref-index) <+ <eq> (term-index, dec-index) 
    

  	
rules //Step 3: Rename terms	 	

	rename-ast(|target-indices, new-name): ast -> renamed-ast
	where
		renamed-ast := <bottomup(try(rename-term(|target-indices, new-name)))> ast

  rename-term(|target-indices, new-name): t -> new-name
	where
		<is-string> t
	 	; term-index := <nabl2-get-ast-index> t
	    ; <elem> (term-index, target-indices)
	    ; new-name-term := <origin-set-relation> (t, new-name)
	    ; h := <has-origin-term> new-name-term
	    ;<ppdebug1> h
	    ; o := t
	  
rules //Step 4: Checking for capture
	  
  check-capture(|renamed-ast, resolution-relation, path) =
		(new-renamed-ast, new-analysis, _, _, _) := <nabl2-analyze-ast(|path)> renamed-ast
		; <ppdebug1> new-analysis
		; old-resolution-relation := <qsort(dec-ref-pair-gt)> resolution-relation
		; new-resolution-relation := <calc-resolution-relation; qsort(dec-ref-pair-gt)> new-analysis
		; <ppdebug(|"old-resolution-relation: ")> old-resolution-relation
		; <ppdebug(|"new-resolution-relation: ")> new-resolution-relation
		; <add-error-on-fail(eq|"Capture detecte", "This renaming leads to name capture")> (old-resolution-relation, new-resolution-relation)
															
		dec-ref-pair-gt: ((ref-1, dec-1), (ref-2, dec-2)) -> <id>
		where
			<term-index-gt> (ref-1, ref-2)
															
		term-index-gt: (TermIndex(path-1, num-index-1), TermIndex(path-2, num-index-2)) -> <id>
		where 
			<gt> (num-index-1, num-index-2)
		
rules // UI strategies

	compose-filename: path -> filename
	where
		path-parts := <string-tokenize(|['.'])>
		; file-extension := <last> path-parts
		; new-file-extension := <conc-strings> ("refactored.", file-extension)
		; filename := <guarantee-extension(|new-file-extension)> path
	
	read-new-name: _ -> new-name
	where 	
   		new-name := <show-input-dialog(|"Rename", "")> "Enter a new name"
   

		  
rules // Utility strategies				
	add-elem: (new-elem, list) -> [new-elem | list]
						  
rules // external rules
	external calc-name-cluster(|)
	
rules // error handling 
	add-error(|title, message) =
	  rules(
	    ErrorMessage :+ () -> (title, message)
	  )
	 
	add-error-on-fail(s|title, message) =
  	  s <+ add-error(|title, message); fail
  	  
	show-errors =
		<ppdebug0> "show-errros";	 
	  [(title, message) | _] := <bagof-ErrorMessage> ()
	  ; <show-dialog(|title, "ERROR")> message 
	  ; <ppdebug0> "show-errros-after"	 
	  
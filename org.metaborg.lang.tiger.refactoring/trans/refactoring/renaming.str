module renaming

imports 
	signatures/-
	nabl2/api
	pp
	libspoofax/stratego/debug
	libspoofax/ui/dialogs
	
	signatures/nabl2/shared/common/-
  signatures/nabl2/runtime/common/-

rules // menu action strategies
  rename-action :
    (selected-term, _, ast, path, project-path) -> (filename, result)
    where
    	analysis := <nabl2-get-ast-analysis> ast;
      <not(nabl2-analysis-has-errors)> analysis
    with
	    check-selection(|selected-term, ast)
	    ; target-dec-occ := <get-target-dec-occ(|analysis)> selected-term 
	    ; target-indices := <get-target-indices(|analysis)> target-dec-occ
			; new-name := <read-new-name> path
			; old-name-bindings := <get-all-name-bindings(|analysis)> ast
			; renamed-ast := <rename-ast(|target-indices, new-name)> ast
	    ; check-capture(|renamed-ast, old-name-bindings, path)
	    ; filename := <compose-filename> path
	    ; result := <pp-Tiger-string> renamed-ast
    
  rename-action-debug :
    (selected-term, _, ast, path, project-path) -> (filename, result)
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
	    check-selection(|selected-term, ast)
	    ; res-rel := <calc-resolution-relation> analysis
	    ; <ppdebug(|"res-rel: ")> res-rel
	    ; java-ret := <calc-eq-classes> res-rel
	  //  ; <ppdebug(|"java-ret ")> java-ret
	    ; target-dec-occ := <get-target-dec-occ(|analysis)> selected-term
	    ; <ppdebug(|"target-dec-occ: ")> target-dec-occ
	    ; target-indices := <get-target-indices(|analysis)> target-dec-occ
	    ; <ppdebug(|"target-indices: ")> target-indices
			; new-name := "foo"
			; old-name-bindings := <get-all-name-bindings(|analysis)> ast
			; renamed-ast := <rename-ast(|target-indices, new-name)> ast
	    ; check-capture(|renamed-ast, old-name-bindings, path)
	    ; filename := <guarantee-extension(|"refactored.aterm")> path
	    ; result := renamed-ast
    
    
rules // Step 1: Find target declaration
  get-target-dec-occ(|analysis): selected-term -> target-dec-occ
	where
		selected-occ := <find-occurrence(|analysis)> selected-term
    ; target-dec-occ := <resolve-occ(|analysis)> selected-occ
    
  find-occurrence(|analysis): term -> occ
  where
  	occs := <get-all-occs(|analysis)> analysis
  	; occ := <collect-one(get-occurrence(|occs))> term
  	
  get-all-occs(|analysis): ast -> occs
	where
		decs := <nabl2-get-all-decls(|analysis)> ast
    ; refs  := <nabl2-get-all-refs(|analysis)> ast
    ; occs := <conc> (decs, refs)
    
	get-occurrence(|occs): term -> occurrence
	where
		<is-string> term
		; term-index := <nabl2-get-ast-index> term
		; occurrence := <fetch-elem(occ-eq-term-index(|term-index))> occs
			
	occ-eq-term-index(|target-term-index): occ@Occurrence(_, _, term-index) -> occ
	where
		<?target-term-index> term-index
    
  resolve-occ(|analysis): selected-occ -> target-dec-occ
  where
  	if (dec-occ, _) := <nabl2-get-resolved-name(|analysis)> selected-occ then
  		target-dec-occ := dec-occ
  	else
  		target-dec-occ := selected-occ
  	end
    
rules // Step 2: Find all terms to rename
  get-target-indices(|analysis): target-dec-occ -> target-indices
  where
    refs  := <nabl2-get-all-refs(|analysis)> analysis
  	; target-ref-occs := <filter(resolves-to-dec(|analysis, target-dec-occ))> refs
    ; target-occs := <add-elem> (target-dec-occ, target-ref-occs)
    ; target-indices := <map(get-term-index-from-occ)> target-occs
    
  calc-resolution-relation: analysis -> relation
  where
  	refs  := <nabl2-get-all-refs(|analysis)> analysis
  	; relation := <map(get-dec-ref-pair(|analysis))> refs
  	
  get-dec-ref-pair(|analysis) : ref -> (ref, dec)
  where
  	(dec, _) := <nabl2-get-resolved-name(|analysis)> ref
  	    
  resolves-to-dec(|analysis, target-dec-occ): ref-occ -> ref-occ
  where
  	(dec-occ, _) := <nabl2-get-resolved-name(|analysis)> ref-occ
  	; <?target-dec-occ> dec-occ
  	
  get-term-index-from-occ: Occurrence(_, name, term-index) -> term-index
  	
rules //Step 3: Rename terms	 	

	rename-ast(|target-indices, new-name): ast -> renamed-ast
	where
		renamed-ast := <bottomup(try(rename(|target-indices, new-name)))> ast

  rename(|target-indices, new-name): t -> new-name
	where
		<is-string> t
	 	; term-index := <nabl2-get-ast-index> t
	  ; <elem> (term-index, target-indices)
	  
rules //Step 4: Checking for capture
	  
  check-capture(|renamed-ast, old-name-bindings, path) =
		(new-renamed-ast, new-analysis, _, _, _) := <nabl2-analyze-ast(|path)> renamed-ast
		; new-name-bindings := <get-all-name-bindings(|new-analysis)> new-renamed-ast
		; old-name-binding-indexes := <get-name-binding-indexes> old-name-bindings
		; new-name-binding-indexes := <get-name-binding-indexes> new-name-bindings
		; <show-error-on-fail(eq|"Capture detecte", "This renaming leads to name capture")> (old-name-binding-indexes, new-name-binding-indexes)
		
		get-all-name-bindings(|analysis): ast -> name-bindings
		where
			refs  := <nabl2-get-all-refs(|analysis)> ast
			; name-bindings := <map(get-dec-ref-pair(|analysis))> refs
			
		get-dec-ref-pair(|analysis): ref -> (ref, dec)
		where
			(dec, _) := <nabl2-get-resolved-name(|analysis)> ref
			
		get-name-binding-indexes: name-bindings -> sorted-indexes
		where
			name-binding-indexes := <map(get-name-binding-index)> name-bindings
			; sorted-indexes := <qsort(dec-ref-pair-gt)> name-binding-indexes
		
		get-name-binding-index: (Occurrence(ref-ns, ref-name, ref-index), Occurrence(dec-ns, dec-name, dec-index)) 
															-> (ref-index, dec-index)	
															
		dec-ref-pair-gt: ((ref-1, dec-1), (ref-2, dec-2)) -> <id>
		where
			<term-index-gt> (ref-1, ref-2)
															
		term-index-gt: (TermIndex(path-1, num-index-1), TermIndex(path-2, num-index-2)) -> <id>
		where 
			<gt> (num-index-1, num-index-2)
		
rules // UI strategies

	compose-filename: path -> filename
	where
		path-parts := <string-tokenize(|['.'])>
		; file-extension := <last> path-parts
		; new-file-extension := <conc-strings> ("refactored.", file-extension)
		; filename := <guarantee-extension(|new-file-extension)> path
	
	read-new-name: _ -> new-name
	where 	
   new-name := <show-input-dialog(|"Rename", "")> "Enter a new name"
   
  check-selection(|selected-term, ast) =
    <show-error-on-fail(not(eq)|"Invalid selection", "Please select a name")> (selected-term, ast)
    
  show-error-on-fail(s|title, message) =
  	s <+ <show-dialog(|title, "ERROR")> message ; fail
		  
rules // Utility strategies				
	add-elem: (new-elem, list) -> [new-elem | list]
						  
rules // external rules
	external calc-eq-classes(|)
    

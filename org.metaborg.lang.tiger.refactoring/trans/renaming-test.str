module renaming-test

imports 
	signatures/-
	nabl2/api
	pp
	libspoofax/stratego/debug
	renaming
	

rules // rules called by spt
  rename-test-var : ast -> renamed-ast
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
      old-name := "msg"
      ; new-name := "message"
      ; path := "test/renaming/variables.spt"
      ; target-dec := VarDecNoType(old-name, Nil())
    	; target-dec-occ := <collect-one(get-declaration-test(|old-name, "Var"))> ast
    	; (old-occ-count, renamed-ast) := <exec-rename(|analysis, target-dec-occ, new-name)> ast
    	; check-capture(|renamed-ast, target-dec-occ, new-name, old-occ-count, path)
    	
  rename-test-var-capture : ast -> renamed-ast
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
      old-name := "y"
      ; new-name := "x"
      ; path := "test/renaming/variables.spt"
      ; target-dec := VarDecNoType(old-name, Nil())
    	; target-dec-occ := <collect-one(get-declaration-test(|old-name, "Var"))> ast
    	; (old-occ-count, renamed-ast) := <exec-rename(|analysis, target-dec-occ, new-name)> ast
    	; not(check-capture(|renamed-ast, target-dec-occ, new-name, old-occ-count, path))
    	
  rename-test-type : ast -> renamed-ast
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
      old-name := "student"
      ; new-name := "person"
      ; path := "test/renaming/types.spt"
      ; target-dec := TypeDec(old-name, Nil())
    	; target-dec-occ := <collect-one(get-declaration-test(|old-name, "Type"))> ast
    	; (old-occ-count, renamed-ast) := <exec-rename(|analysis, target-dec-occ, new-name)> ast
    	; check-capture(|renamed-ast, target-dec-occ, new-name, old-occ-count, path)
    	
  rename-test-field : ast -> renamed-ast
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
      old-name := "name"
      ; new-name := "fullName"
      ; path := "test/renaming/types.spt"
      ; target-dec := Field(old-name, Nil())
    	; target-dec-occ := <collect-one(get-declaration-test(|old-name, "Field"))> ast
    	; (old-occ-count, renamed-ast) := <exec-rename(|analysis, target-dec-occ, new-name)> ast
    	; check-capture(|renamed-ast, target-dec-occ, new-name, old-occ-count, path)
 
  rename-test-function : ast -> renamed-ast
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
      old-name := "plus"
      ; new-name := "add"
      ; path := "test/renaming/functions.spt"
      ; target-dec := FunDec(old-name, [], Nil(), [])
    	; target-dec-occ := <collect-one(get-declaration-test(|old-name, "Var"))> ast
    	; (old-occ-count, renamed-ast) := <exec-rename(|analysis, target-dec-occ, new-name)> ast
    	; check-capture(|renamed-ast, target-dec-occ, new-name, old-occ-count, path)   
    	
  rename-test-procedure : ast -> renamed-ast
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
      old-name := "printnl"
      ; new-name := "printNewLine"
      ; path := "test/renaming/functions.spt"
      ; target-dec := ProcDec(old-name, [], [])
    	; target-dec-occ := <collect-one(get-declaration-test(|old-name, "Var"))> ast
    	; (old-occ-count, renamed-ast) := <exec-rename(|analysis, target-dec-occ, new-name)> ast
    	; check-capture(|renamed-ast, target-dec-occ, new-name, old-occ-count, path)  

  rename-test-farg : ast -> renamed-ast
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
      old-name := "x"
      ; new-name := "text"
      ; path := "test/renaming/functions.spt"
      ; target-dec := FArg(old-name, Nil())
    	; target-dec-occ := <collect-one(get-declaration-test(|old-name, "Var"))> ast
    	; (old-occ-count, renamed-ast) := <exec-rename(|analysis, target-dec-occ, new-name)> ast
    	; check-capture(|renamed-ast, target-dec-occ, new-name, old-occ-count, path)  
    	
  rename-test-farg-capture : ast -> renamed-ast
    where
    	analysis := <nabl2-get-ast-analysis> ast
      ; <not(nabl2-analysis-has-errors)> analysis
    with
      old-name := "d"
      ; new-name := "a"
      ; path := "test/renaming/functions.spt"
      ; target-dec := FArg(old-name, Nil())
    	; target-dec-occ := <collect-one(get-declaration-test(|old-name, "Var"))> ast
    	; (old-occ-count, renamed-ast) := <exec-rename(|analysis, target-dec-occ, new-name)> ast
    	; not(check-capture(|renamed-ast, target-dec-occ, new-name, old-occ-count, path))
		  
rules
	get-declaration-test(|target-name, namespace): VarDecNoType(name, exp) -> dec-occ
	where
		<eq> (<strip-annos> target-name, <strip-annos> name) 
    ; dec-occ := <nabl2-mk-occurrence(|namespace)> name
    
  get-declaration-test(|target-name, namespace): VarDec(name, type, exp) -> dec-occ
	where
		<eq> (<strip-annos> target-name, <strip-annos> name) 
    ; dec-occ := <nabl2-mk-occurrence(|namespace)> name
    
  get-declaration-test(|target-name, namespace): TypeDec(name, type) -> dec-occ
	where
		<eq> (<strip-annos> target-name, <strip-annos> name) 
    ; dec-occ := <nabl2-mk-occurrence(|namespace)> name
    
  get-declaration-test(|target-name, namespace): Field(name, type) -> dec-occ
	where
		<eq> (<strip-annos> target-name, <strip-annos> name) 
    ; dec-occ := <nabl2-mk-occurrence(|namespace)> name
    
  get-declaration-test(|target-name, namespace): FunDec(name, args, type, body) -> dec-occ
	where
		<eq> (<strip-annos> target-name, <strip-annos> name) 
    ; dec-occ := <nabl2-mk-occurrence(|namespace)> name
    
  get-declaration-test(|target-name, namespace): ProcDec(name, args, body) -> dec-occ
	where
		<eq> (<strip-annos> target-name, <strip-annos> name) 
    ; dec-occ := <nabl2-mk-occurrence(|namespace)> name
    
  get-declaration-test(|target-name, namespace): FArg(name, type) -> dec-occ
	where
		<eq> (<strip-annos> target-name, <strip-annos> name) 
    ; dec-occ := <nabl2-mk-occurrence(|namespace)> name
    
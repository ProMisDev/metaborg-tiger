module renaming

imports 
  signatures/-
  analysis
  libspoofax/stratego/debug
  libspoofax/ui/dialogs
  libspoofax/sdf/pp
	
  libspoofax/term/annotation
  libspoofax/term/origin
  
  statix/runtime/-

rules     
  rename-action(construct-textual-change, analyze):
    (selected-term, _, ast, path, _) -> (path, result)
    where
      {| ErrorMessage:
        new-name := <read-new-name> path
        ; renamed-ast := <rename(analyze|selected-term, new-name, path)> ast 
        ; (_, _, result) := <construct-textual-change> (ast, renamed-ast)
      <+ show-errors |}      
	    
  rename(analyze|selected-term, new-name, path): ast -> renamed-ast
    where
      analysis := <get-analysis> ast
      ; resolution-relation :=  <calc-resolution-relation(|ast)> analysis
      ; selected-index := <find-name-index(|ast, resolution-relation)> selected-term
      ; target-indices := <calc-name-cluster> (selected-index, resolution-relation)
      ; renamed-ast := <rename-ast(|target-indices, new-name)> ast
      ; check-capture(analyze|renamed-ast, resolution-relation, path)
	    
rules // Step 1: Calculate Resolution Relation
  calc-resolution-relation(|ast): analysis -> user-defined-relation
  where
  	ref-dec-pairs  := <collect(get-dec-ref-pair(|analysis))> ast
  	; decs-reflexive-pairs := <collect(get-dec-reflexive-pair(|analysis))> ast
  	; relation := <conc;make-set> (decs-reflexive-pairs, ref-dec-pairs)
  	; user-defined-relation := <filter(is-not-built-in)> relation
  	
  get-dec-ref-pair(|analysis): ref -> (ref-index, dec-index)
  where
  	<is-string> ref
  	; dec := <stx--get-ast-property(|analysis, Ref())> ref
  	; ref-index@TermIndex(ref-path, _) := <stx--get-ast-index> ref
  	; if index := <stx--get-ast-index> dec then
  		dec-index := index
  	  else
  	    dec-index := TermIndex(ref-path,0)
  	  end
  	  
  get-dec-reflexive-pair(|analysis): t -> (dec-index, dec-index)
  where
  	<is-string> t
  	; dec := <stx--get-ast-property(|analysis, Prop("decl"))> 
  	; dec-index := <stx--get-ast-index> dec
  	  
  make-dec-reflexive-pair: (ref-index, dec-index) -> (dec-index, dec-index)  	  
  	
  is-not-built-in: (ref, dec@TermIndex(path, num-index)) -> <id>
  where
  	<not(eq)> (num-index, 0)
  	    
rules // Step 2: Find name index in selection
  find-name-index(|ast, res-rel): term -> occ-index
    where
      <check-selection(|term, ast)> ast
      ; occ-index := <collect-one(get-name-index(|res-rel))> term  
        <+ add-error(|"Renaming impossible", "The selected term cannot be renamed.")

  get-name-index(|res-rel): term -> occurrence
    where
      if (<is-list> term) then
        <map(get-name-index(|res-rel))> term
      else
        <is-string> term
        ; term-index := <stx--get-ast-index> term
        ; occurrence := <fetch-elem(res-pair-contains(|term-index))> res-rel
      end	
			
  res-pair-contains(|term-index): (ref-index, dec-index) -> term-index 
    where
      <eq> (term-index, ref-index) <+ <eq> (term-index, dec-index)   

rules //Step 4: Rename terms	 	
  rename-ast(|target-indices, new-name): ast -> renamed-ast
    where
      renamed-ast := <bottomup(try(rename-term(|target-indices, new-name)))> ast

  rename-term(|target-indices, new-name): term -> new-name
    where
      <is-string> term
      ; term-index := <stx--get-ast-index> term
      ; <elem> (term-index, target-indices)
	  
rules //Step 5: Checking for capture
  check-capture(analyze|renamed-ast, resolution-relation, path) =
    (new-renamed-ast, new-analysis) := <rerun-analysis(analyze)> (path, renamed-ast)  
    ; new-resolution-relation := <calc-resolution-relation(|new-renamed-ast); qsort(res-pair-gt)> new-analysis
    ; old-resolution-relation := <qsort(res-pair-gt)> resolution-relation
    ; <eq>(old-resolution-relation, new-resolution-relation) 
      <+ add-error(|"Capture detected", "This renaming leads to name capture")
      
  rerun-analysis(analyze): (path, renamed-ast) -> (new-ast, new-analysis)
    where
      input := <make-analysis-input> (path, renamed-ast)
      ; AnalysisResult(analyses) := <analyze> input
      ; (_, Full(new-ast, FileAnalysis(_, new-analysis), _, _,_)) := <fetch-elem(?(path, _))> analyses
      
  make-analysis-input: (path, renamed-ast) -> AnalyzeSingle([(path, change)], (), ())
    where
      old-analysis := <stx--get-ast-analysis> renamed-ast
      ; change := Changed(renamed-ast,old-analysis)
															
  res-pair-gt: ((ref-1, dec-1), (ref-2, dec-2)) -> <id>
    where
      <term-index-gt> (ref-1, ref-2) 
															
  term-index-gt: (TermIndex(path-1, num-index-1), TermIndex(path-2, num-index-2)) -> <id>
    where 
      <string-gt> (path-1, path-2) <+ <gt> (num-index-1, num-index-2)
    
rules // Utility strategies
  read-new-name: _ -> new-name
    where 	
      new-name := <show-input-dialog(|"Rename", "")> "Enter a new name"

  check-selection(|selected-term, ast) =
    <not(eq)> (selected-term, ast)
  	<+ add-error(|"Invalid selection", "Please select a name")
    
  get-analysis: ast -> analysis
    where 
      analysis := <stx--get-ast-analysis> ast
      /*
      ; <not(nabl2-analysis-has-errors)> analysis
      <+ add-error(|"Renaming impossible", "The program contains errors.")
      */    
  	
  add-error(|title, message) =
    rules(
      ErrorMessage :+ () -> (title, message)
    ); fail
      
  show-errors =    
    [(title, message) | _] := <bagof-ErrorMessage> ()
    ; <show-dialog(|title, "ERROR")> message   
     
  add-error-on-fail(s|title, message) =
    s <+ add-error(|title, message); fail
    
rules // external rules
  external calc-name-cluster(|)
